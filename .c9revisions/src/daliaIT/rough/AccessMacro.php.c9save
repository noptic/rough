{"ts":1360264281765,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/*/\ntype:       class\nauthor:     Oliver Anan <oliver@ananit.de>\ntags:       [macro, access, get, set, getter, setter]\n\nAccessMacro\n================================================================================\nCreates a getter and/or a setter for one or more properties.\n\nThis macro combines a GetMacro and a SetMacro,code generation and type hinting\nare handled by GetMacro and SetMacro\n\nSyntax\n--------------------------------------------------------------------------------\n\n    access <getAcess> <setAccess> <properties> [type=mixed]\n    \ngetAccess\n:   The visibility of the getter method.\n:    No getter method will be generated if the value eqals 'none'.\n:    Single word.\n:    Required argument.\n    \nsetAccess\n:   The visibility of the setter method.\n    No setter method will be generated if the value eqals 'none'.\n:   Single word.\n:   Required argument.\n    \nproperties\n:   The properties which the getters and setters point to.\n:   Single word or list.\n:   Required argument.\n    \ntype\n:   The type of the property the getter points to.\n:   Type hinting and validation are delegated to GetMacro and SetMacro.\n:   Optional argument. Default is 'mixed'\n     \nExamples\n--------------------------------------------------------------------------------\nAllow public read acces to name but do not create a setter:\n\n    class User\n    {\n        protected \n            $name;\n            \n        #@access public none  name#\n        \n        public function getName(){\n            return $this->name;\n        }\n        #@#\n    }\n    \nCreate typesave setter:\n\n    class User\n    {\n        protected\n            $name;\n            \n        #@access public public name string#\n        \n        #:string\n        public function getName(){\n            return $this->name;\n        }\n        \n        #:this\n        public function setName($value){\n            if(! is_string($value)){\n               throw new \\InvalidArgumentException(\n                 __METHOD__ .' expects a string but got a '.gettype($value)\n               );\n            }\n            $this->name = $value;\n            return $this;\n        }\n        #@# \n    }\n    \ncreate multiple setters and getters:\n\n    class User\n    {\n        protected\n            $givenName,\n            $familyName;\n            \n        #@access public public [givenName familyName] string#\n        \n        #:string\n        public function getGivenName(){\n            return $this->givenName;\n        }\n        \n        #:string\n        public function getFamilyName(){\n            return $this->familyName;\n        }\n        \n        #:this\n        public function setGivenName($value){\n            if(! is_string($value)){\n               throw new \\InvalidArgumentException(\n                 __METHOD__ .' expects a string but got a '.gettype($value)\n               );\n            }\n            $this->givenName = $value;\n            return $this;\n        }\n        \n        #:this\n        public function setFamilyName($value){\n            if(! is_string($value)){\n               throw new \\InvalidArgumentException(\n                 __METHOD__ .' expects a string but got a '.gettype($value)\n               );\n            }\n            $this->familyName = $value;\n            return $this;\n        }\n        #@# \n    }\n    \nSource\n--------------------------------------------------------------------------------\n/*/\nnamespace daliaIT\\rough;\nuse Exception;\nclass AccessMacro{\n    public function __invoke($args){\n        if(count($args) < 3){\n            throw new Exception(\n                \"Missing required macro argument.\" \n                .\"The macro 'access' requires at least 3 arguments:\\n\"\n                .\"<getAccess> <setAccess> <properties>\"\n            );\n        }\n        $getAccess  = $args[0];\n        $setAccess  = $args[1];\n        $hints      = (isset($args[3]))\n            ? $args[3]\n            : false;\n        $properties = (array) $args[2];\n        $getMacro   = new GetMacro();\n        $setMacro   = new SetMacro();\n        $result     = '';\n        if($getAccess !== 'none'){\n            $result .= $getMacro(array($getAccess,$properties,$hints));\n        }\n        if($setAccess !== 'none'){\n            $result .= $setMacro(array($setAccess,$properties,$hints));\n        }\n        return $result;\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":4294}]],"length":4294}
