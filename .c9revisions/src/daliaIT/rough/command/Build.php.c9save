{"ts":1360098083311,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\nnamespace daliaIT\\rough\\command;\nuse Spyc,\n    Exception,\n    InvalidArgumentException,\n    RuntimeException,\n    daliaIT\\rough\\FileSearcher,\n    daliaIT\\rough\\GetMacro,\n    daliaIT\\rough\\SetMacro,\n    daliaIT\\rough\\AccessMacro,\n    daliaIT\\rough\\ImportMacro,\n    daliaIT\\rough\\MacroLib,\n    daliaIT\\rough\\MacroParser,\n    daliaIT\\rough\\ListClassFileFinder;\n    \nclass Build\n{\n    protected\n    #:MacroParser\n        $parser;\n        \n    public function __construct(){\n        $lib    = new MacroLib();\n        $lib->setMacro('get',new GetMacro())\n            ->setMacro('set',new SetMacro())\n            ->setMacro('access',new AccessMacro())\n            ->setMacro('import',new ImportMacro());\n        $this->parser = new MacroParser($lib);\n    }\n    \n    public function run(array $args){\n        if(! isset($args[0]) ){\n            throw new InvalidArgumentException(\n                'Missing argument. No build file set.'    \n            );\n        }\n        $buildFilePath = getcwd().'/'.$args[0];\n        if(! is_readable($buildFilePath) ){\n            throw new RuntimeException(\n                \"Can not read build file '$buildFilePath'\"    \n            );\n        } \n        $buildInfo = json_decode(file_get_contents($buildFilePath),true);\n        foreach(array('extra','dalia-it','rough','build') as $index => $key){\n            if(! isset($buildInfo[$key]) ){\n                throw new RuntimeException(\n                    \"Invalid build file. Missing node #$index '$key'\"\n                );\n            }\n            $buildInfo = $buildInfo[$key];\n        }\n        if(! isset($buildInfo['source']) ){\n            throw new RuntimeException(\n                \"Invalid build file. No source directory set\"    \n            );\n        }\n        $this->buildFiles(\n            dirname($buildFilePath),\n            $buildInfo\n        );\n        return $this;\n    }\n    \n    protected function buildFiles($base, $buildInfo){\n        $files      = $this->getTargetFiles($base, $buildInfo);\n        $classList = $this->createClassLIst($files);\n        $this->updateMacros($files, $classList);\n        foreach($files as $shortName => $file){\n            $out = \"$base/{$buildInfo['target']}/$shortName\";\n            $this->buildFile($file,  $out);\n        }\n        if( isset($buildInfo['index'])){\n            $index = Spyc::YAMLDump($classList);\n            file_put_contents(\"{$base}/{$buildInfo['index']}\",$index);\n        }\n        return $this;\n    }\n    \n    protected function updateMacros($fileList,$classList){\n        $finder = new ListClassFileFinder;\n        $finder->setFiles($classList);\n        $this->parser->getMacroLib()\n            ->getMacro('import')->setClassFileFinder($finder);\n        return $this;\n    }\n    \n    protected function createClassList(array $files){\n        $classList = array();\n        foreach($files as $shortName => $file){\n            $class = trim(str_replace('/','\\\\',$shortName),\"\\\\\");\n            $class = substr($class, \"0\", strpos($class,'.') );\n            $classList[$class] = $file;\n        }\n        return $classList;\n    }\n    \n    protected function buildFile($in, $out){\n        $contents   = file_get_contents($in);\n        try{\n            $contents   = $this->processContents($contents);\n        }  catch(Exception $e){\n            throw new RuntimeException(\n                \"Processing file'$in' failed.\\n\"\n                .$e->getMessage()\n            );\n        }\n        $fileDir    = dirname($out);\n        if(! file_exists($fileDir)){\n            mkdir($fileDir, 0777, true);\n        }\n        file_put_contents($out, $contents);\n        return $this;\n    }\n    \n    protected function processContents($contents){\n        return $this->parser->replace($contents);\n    }\n    \n    protected function getTargetFiles($base, $buildInfo){\n        $files = array();\n        $searcher = new FileSearcher();\n        foreach( ((array) $buildInfo['source']) as $src){\n            $path       = \"$base/$src\";\n            $pathLength = strlen($path);\n            $newFiles = $searcher->searchRecursive(\n                '*.php',\n                $path\n            );\n            foreach($newFiles as $newFile){\n                $files[ substr($newFile, $pathLength) ] = $newFile;\n            }\n        }\n        return $files;\n    }\n    \n    #@access public public MacroParser#\n    \n    public function getMacroParser(){\n        return $this->MacroParser;\n    }\n    \n    #:this\n    public function setMacroParser($value){\n        $this->MacroParser = $value;\n        return $this;\n    }\n    #@#\n}"]],"start1":0,"start2":0,"length1":0,"length2":4561}]],"length":4561}
